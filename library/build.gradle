plugins {
    id 'de.undercouch.download' version '5.1.1'
    id 'maven-publish'
    id 'com.android.fused-library'
}

// Pass GitHub release URL and version as properties
def aarUrl = project.findProperty("aarUrl") ?: System.getenv("AAR_URL") ?: ""
def libVersion = project.findProperty("version") ?: System.getenv("VERSION") ?: ""

if (!aarUrl) {
    throw new GradleException("You must provide -PaarUrl=<url-to-aar>")
}
if (!libVersion) {
    throw new GradleException("You must provide -Pversion=<version>")
}

// Where to store downloaded .aar
def aarFile = file("$buildDir/libs/mylibrary.aar")

androidFusedLibrary {
    namespace 'com.carto'
    minSdk 21
}
dependencies {
    include files(aarFile)
}
// Task to download .aar from GitHub Release
tasks.register('downloadAAR', de.undercouch.gradle.tasks.download.Download) {
    src aarUrl
    dest aarFile
    overwrite true
}


// Make the library tasks depend on the download
// This is the safe way to ensure the download completes first
tasks.matching { it.name.startsWith("pre") && it.name.endsWith("Build") }
     .configureEach { dependsOn(tasks.named("downloadAAR")) }

publishing {
   
    publications {
        release(MavenPublication) {
            groupId = 'com.carto'
            artifactId = 'carto-mobile-sdk'
            version = libVersion

            // define artifact file
            afterEvaluate {
                from components.fusedLibraryComponent
            }

            // Define this explicitly if using implementation or api configurations
            pom.withXml {
                def dependenciesNode = asNode()['dependencies'][0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
