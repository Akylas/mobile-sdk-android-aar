plugins {
    id 'com.android.library'
    id 'de.undercouch.download' version '5.6.0'
}

// 2️⃣ Unpack it into the build intermediates
def downloadedAar = layout.buildDirectory.file("downloads/external-lib.aar")
def unpackDir = layout.buildDirectory.dir("unpacked-aar")
def jarUnpackDir = layout.buildDirectory.dir("unpacked-classes")
print("downloadedAar ${downloadedAar.get().asFile}")
print("unpackDir ${unpackDir.get().asFile}")

def aarUrl = project.findProperty("aarUrl") ?: System.getenv("AAR_URL") ?: ""

if (!aarUrl) {
    throw new GradleException("You must provide -PaarUrl=<url-to-aar>")
}

// 1️⃣ Download the AAR before compilation
tasks.register('downloadAar', de.undercouch.gradle.tasks.download.Download) {
    src aarUrl
    dest downloadedAar
    onlyIfModified true
}


// 2️⃣ Unpack the AAR
tasks.register('unpackAar', Copy) {
    dependsOn("downloadAar")
    from(zipTree(downloadedAar))
    into(unpackDir)
}

// tasks.register("unpackClassesJar", Copy) {
//     dependsOn("unpackAar")
//     from(zipTree("${unpackDir.get().asFile}/classes.jar"))
//     into(jarUnpackDir)
// }

def mergedClassesDir = layout.buildDirectory.dir("intermediates/merged-classes/release")

// 3️⃣ Merge the downloaded AAR's classes.jar into our own classes
tasks.register("mergeClassesJar", Jar) {
    dependsOn("compileReleaseJavaWithJavac") // or variant-specific compile task
    print("mergeClassesJar")
    // Compiled classes from this module
    from(layout.buildDirectory.dir("intermediates/javac/release/classes").get().asFile)
    

    // Output merged classes
    from(zipTree("${unpackDir.get().asFile}/classes.jar"))


    archiveFileName = "classes.jar"
    destinationDirectory = layout.buildDirectory.dir("intermediates/merged-classes/release").get().asFile
}

tasks.register("repackAar", Zip) {
    // Start from the original AAR
    from(zipTree(layout.buildDirectory.file("outputs/aar/${project.name}-release.aar").get().asFile))
    
    // Replace the classes.jar inside the AAR with your merged one
    from(layout.buildDirectory.file("intermediates/merged-classes/release/classes.jar").get().asFile) {
        into("/") // put classes.jar at the root of the AAR
    }

    // Optional: merge res, assets, JNI if needed
    from(layout.buildDirectory.dir("unpacked-aar/res").get().asFile) { into("res") }
    from(layout.buildDirectory.dir("unpacked-aar/assets").get().asFile) { into("assets") }
    from(layout.buildDirectory.dir("unpacked-aar/jni").get().asFile) { into("jni") }

    // Output directory
    destinationDirectory.set(layout.buildDirectory.dir("outputs/aar/merged"))

    // Name of final AAR
    archiveFileName.set("${project.name}-release.aar")

    // Handle duplicates if needed
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


// 5️⃣ Merge resources / assets / JNI libs
tasks.register("prepareManifest") {
    dependsOn("unpackAar")
    doLast {
        def srcManifest = new File(unpackDir.get().asFile, "AndroidManifest.xml")
        def destManifest = layout.buildDirectory.file("prepared/AndroidManifest.xml").get().asFile

        def text = srcManifest.text.replaceFirst(/package=".*?"/, "")
        destManifest.parentFile.mkdirs()
        destManifest.text = text
    }
}
// tasks.named("build") {
//     dependsOn("repackAar")
// }
// afterEvaluate {
//     tasks.matching { it.name.startsWith("bundle") }.all { bundleTask ->
//         // Run our repack after the AAR is built
//         bundleTask.finalizedBy("mergeClassesJar")
//     }
// }
// tasks.named("build") {
//     dependsOn("mergeClassesJar")
// }
android {
    namespace = "com.carto.aarwrapper"
    compileSdk = 34
    sourceSets {
        main {
            java.srcDir(mergedClassesDir)
            res.srcDir("${unpackDir.get().asFile}/res")
            assets.srcDir("${unpackDir.get().asFile}/assets")
            // manifest.srcFile("${unpackDir.get().asFile}/AndroidManifest.xml")
            manifest.srcFile(layout.buildDirectory.file("prepared/AndroidManifest.xml"))
            // Include JNI libs
            jniLibs.srcDir("${unpackDir.get().asFile}/jni")
        }
    }
}

// Make sure unpackAar runs before anything else
tasks.named("preBuild") {
    dependsOn("prepareManifest")
}
afterEvaluate {
    tasks.matching { t ->
        t.name.toLowerCase().contains("bundle") // matches any AAR bundle task
    }.all { bundleTask ->
        bundleTask.dependsOn("mergeClassesJar") // adjust per variant
        // bundleTask.finalizedBy("repackAar") // adjust per variant
    }
}
// androidComponents {
//     onVariants(selector().all()) { variant ->

//         // Path to the compiled classes directory
//         def mergeTaskName = "merge${variant.name.capitalize()}ClassesJar"

//         tasks.register(mergeTaskName, Copy) {
//             dependsOn("unpackAar") // your downloaded AAR

//             // module compiled classes
//             from(compileClassesDir)

//             // classes from downloaded AAR
//             from(zipTree("${unpackDir.get().asFile}/classes.jar"))

//             // output merged classes
//             into(layout.buildDirectory.dir("intermediates/merged-classes/${variant.name}").get().asFile)
//         }

//         // Attach merge task to the variant's classes artifact (modern safe way)
//         variant.artifacts.forEach { artifactType, artifactContainer ->
//             artifactContainer.builtBy(tasks.named(mergeTaskName))
//         }
//     }
// }


dependencies {
    // After unpacking, add its classes.jar to the classpath
    implementation(files("${unpackDir.get().asFile}/classes.jar"))
}
